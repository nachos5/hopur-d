package database.dev;

import models.*;
import main.utilities.Utils;

import java.lang.reflect.Array;
import java.net.URL;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import org.json.JSONArray;
import org.json.JSONObject;
import com.github.javafaker.Faker;


import static main.utilities.Utils.*;
import static database.BookingQueries.*;
import static database.CompanyQueries.*;
import static database.DepartureQueries.*;
import static database.ReviewQueries.*;
import static database.TripQueries.*;
import static database.UserQueries.*;

public class Insert {
  private static int noCompanies = 20;
  private static int noTrips = 300;
  private static int noDepartures = 1000;

  public static void run() {
    // upphafs-notendagögn
    createInitialUsers();
    // upphafs-fyrirtæki
    URL url = Insert.class.getResource("companies.json");
    JSONObject compJSON = Utils.readJSON(url);
    createInitialCompanies(compJSON);
    // upphafs-ferðagögn
    url = Insert.class.getResource("trips.json");
    JSONObject tripsJSON = Utils.readJSON(url);
    createInitialTrips(tripsJSON);
    createInitialDepartures();
    // upphafs-dómar
    createInitialReviews();
    // upphafs-bókanir
    createInitialBookings();
  }

  private static void createInitialCompanies(JSONObject compJSON) {
    ArrayList<Company> companies = new ArrayList<>();
//    companies.add(new Company("Reykjavik Excursion", compJSON.getString("Reykjavik Excursion")));
//    companies.add(new Company("The Icelandic Horse", compJSON.getString("The Icelandic Horse")));
//    companies.add(new Company("New York Tours", compJSON.getString("New York Tours")));
//    companies.add(new Company("London Tours", compJSON.getString("London Tours")));

    // fake gögn
    Faker faker = new Faker();
    for (int i=0; i<noCompanies; i++) {
      companies.add(new Company(faker.commerce().department(), faker.lorem().paragraph()));
    }

    for (Company company: companies) {
      insertCompany(company);
      delay(50);
    }
  }

  private static void createInitialUsers() {
    ArrayList<User> users = new ArrayList<>();
    users.add(new User("admin", true, "admin@gmail.com", Utils.hashPassword("admin")));
    users.add(new User("testuser1", false,"user@gmail.com", Utils.hashPassword("siggi")));
    users.add(new User("testuser2", false, "user2@gmail.com", Utils.hashPassword("bubbi")));

    for (User user: users) {
      insertUser(user);
      delay(50);
    }
  }

  private static void createInitialTrips(JSONObject tripsJSON) {
    ArrayList<Trip> trips = new ArrayList<>();

    // alvöru gögn
//    trips.add(new Trip("Golden Circle Direct", Enums.Category.BUS, 50, 360, 40, Enums.Country.IS, Enums.City.RVK,
//        Enums.Accessability.MEDIUM, Enums.Language.EN, false, tripsJSON.getString("Golden Circle Direct"), getCompanyByName("Reykjavik Excursion")));
//
//    trips.add(new Trip("The Lava Tunnel", Enums.Category.ADVENTURE, 75, 180, 10, Enums.Country.IS, Enums.City.RVK,
//        Enums.Accessability.MEDIUM, Enums.Language.EN, false, tripsJSON.getString("The Lava Tunnel"), getCompanyByName("Reykjavik Excursion")));
//
//    trips.add(new Trip("Langjökull Ice Cave Experience", Enums.Category.GLACIER, 200, 540, 20, Enums.Country.IS, Enums.City.RVK,
//        Enums.Accessability.MEDIUM, Enums.Language.EN, false, tripsJSON.getString("Langjökull Ice Cave Experience"), getCompanyByName("Reykjavik Excursion")));
//
//    trips.add(new Trip("Evening Riding Tour", Enums.Category.HORSE, 150, 150, 8, Enums.Country.IS, Enums.City.RVK,
//        Enums.Accessability.HARD, Enums.Language.EN, true, tripsJSON.getString("Langjökull Ice Cave Experience"), getCompanyByName("The Icelandic Horse")));
//
//    trips.add(new Trip("Horses and Whales", Enums.Category.HORSE, 150, 360, 11, Enums.Country.IS, Enums.City.RVK,
//        Enums.Accessability.HARD, Enums.Language.EN, true, tripsJSON.getString("Horses and Whales"), getCompanyByName("The Icelandic Horse")));
//
//    trips.add(new Trip("Statue of Liberty and Ellis Island Tour", Enums.Category.SIGHTSEEING, 100, 540, 26, Enums.Country.US, Enums.City.NY,
//        Enums.Accessability.EASY, Enums.Language.EN, false, tripsJSON.getString("Statue of Liberty and Ellis Island Tour"), getCompanyByName("New York Tours")));
//
//    trips.add(new Trip("New York City All Day Tour", Enums.Category.SIGHTSEEING, 80, 350, 8, Enums.Country.US, Enums.City.NY,
//        Enums.Accessability.MEDIUM, Enums.Language.EN, true, tripsJSON.getString("New York City All Day Tour"), getCompanyByName("New York Tours")));
//
//    trips.add(new Trip("Brooklyn", Enums.Category.SIGHTSEEING, 60, 270, 8, Enums.Country.US, Enums.City.NY,
//        Enums.Accessability.MEDIUM, Enums.Language.EN, true, tripsJSON.getString("Brooklyn"), getCompanyByName("New York Tours")));
//
//    trips.add(new Trip("Downtown", Enums.Category.SIGHTSEEING, 45, 210, 8, Enums.Country.US, Enums.City.NY,
//        Enums.Accessability.EASY, Enums.Language.EN, true, tripsJSON.getString("Downtown"), getCompanyByName("New York Tours")));
//
//    trips.add(new Trip("Stonehenge, Bath & English Countryside", Enums.Category.SIGHTSEEING, 80, 600, 33, Enums.Country.UK, Enums.City.LON,
//        Enums.Accessability.EASY, Enums.Language.EN, false, tripsJSON.getString("Stonehenge, Bath & English Countryside"), getCompanyByName("London Tours")));
//
//    trips.add(new Trip("London Royal Parks Bike Tour including Hyde Park", Enums.Category.BIKING, 40, 240, 10, Enums.Country.UK, Enums.City.LON,
//        Enums.Accessability.HARD, Enums.Language.EN, true, tripsJSON.getString("London Royal Parks Bike Tour including Hyde Park"), getCompanyByName("London Tours")));
//
//    trips.add(new Trip("Classic London Bike Tour of Central London", Enums.Category.BIKING, 40, 240, 10, Enums.Country.UK, Enums.City.LON,
//        Enums.Accessability.HARD, Enums.Language.EN, true, tripsJSON.getString("Classic London Bike Tour of Central London"), getCompanyByName("London Tours")));

    // fake gögn
    Faker faker = new Faker();
    for (int i=0; i<noTrips; i++) {
      trips.add(new Trip(faker.ancient().god() + " " + faker.ancient().hero(), Utils.randomEnum(Enums.Category.class), faker.number().numberBetween(30, 1000),
          faker.number().numberBetween(100, 800), faker.number().numberBetween(4, 50), Utils.randomEnum(Enums.Country.class),
          Utils.randomEnum(Enums.City.class), Utils.randomEnum(Enums.Accessability.class), Utils.randomEnum(Enums.Language.class),
          Math.random() < 0.5, faker.lorem().paragraph(), getCompanyById( faker.number().numberBetween(1, noCompanies) )));
    }
    // setjum allar ferðirnar í database-ið
    for (Trip t: trips) {
      insertTrip(t);
      delay(50); // bíðum smá á milli requesta
    }
  }

  private static void createInitialDepartures() {
    ArrayList<Departure> departures = new ArrayList<>();
    departures.add(new Departure(getTripById(1), new GregorianCalendar(2019, Calendar.JUNE, 10, 12, 30, 0), true, 2));
    departures.add(new Departure(getTripById(2), new GregorianCalendar(2019, Calendar.JULY, 20, 8, 0, 0), false, 10));
    departures.add(new Departure(getTripById(3), new GregorianCalendar(2019, Calendar.AUGUST, 30, 11, 20, 0), true, 0));

    for (Departure d: departures) {
      insertDeparture(d);
      delay(50);
    }
  }

  private static void createInitialReviews() {
    ArrayList<Review> reviews = new ArrayList<>();
    reviews.add(new Review(getUser("admin"), getTripById(1), "Vá!", "Frábær ganga!", 5.0, true));
    reviews.add(new Review(getUser("testuser1"), getTripById(1), "Glatað!", "Ömurleg ganga!", 0.5, true));
    reviews.add(new Review(getUser("testuser2"), getTripById(2), "Farið til helvítis!", "Ætla að kæra ykkur fyrir ósættanlega framkomu!", 0.0, false));

    for (Review review: reviews) {
      insertReview(review);
      delay(50);
    }
  }

  private static void createInitialBookings() {
    ArrayList<Booking> bookings = new ArrayList<>();
    bookings.add(new Booking(getUser("admin"), getDepartureById(1), Enums.Status.UNPAID));
    bookings.add(new Booking(getUser("admin"), getDepartureById(2), Enums.Status.PAID));
    bookings.add(new Booking(getUser("testuser1"), getDepartureById(1), Enums.Status.UNPAID));

    for (Booking booking: bookings) {
      insertBooking(booking);
      delay(50);
    }
  }

}
